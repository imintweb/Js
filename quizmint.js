(function ($) {"use strict"; $. dlxQuiz = function (element, options) {var plugin = this, $ element = $ (element), _ element_id = $ element.attr ('id'), _ element = '#' + _ element_id, question_index = 0, quizData = options.quizData, questions = null, questionCount = null, defaults = {questionCount_text: "Question to% current_index of% total questionQuestions", backButton_text: "Previous question", nextButton_text: "Next question", completeButton_text: "Finish Quiz", viewResultsButton_text: "See Results", resultsHeader_text: "This is what you were working on.", QuizScore_text: "You answered% totalScore of% totalQuestions questions correctly.", QuizScoreMessage_text: "" , quizScoreRank_text: {a: "Perfect Value!", b: "Good Work!", c: "At least you didn't fail ", d:" You should study harder ", f:" You were serious when you worked on this quiz? ", G:" A little more .. "}, show_QuestionCount: true, showBackButton: true, showRadioButtons: true, showScoreRank: true, showScoreMessage: true, showViewResultsButton: true, randomizeQuestions: true, randomizeAnswers: true,}, class_disabled = "disabled", class_quizQuestions = "quizQuestions", class_showQuestion = "showQuestion", class_questionQuestion = "disabled" ", class_questionAnswers =" questionAnswers ", class_selectedAnswer =" selectedAnswer ", class_quizControls =" quizControls ", class_ctrlPreviousButton =" ctrlPrev ", class_ctrlNextButton =" ctrlNext ", class_ctonexCompSite"quizResults ", class_quizScoreRank =" quizScoreRank ", class_quizScore =" quizScore ", class_quizScoreMessage =" quizScoreMessage ", class_viewResultsButton =" viewResults ", class_showingResults =" showingResults ", _ questions =" ??queries " = "." + class_questionAnswers, _controls = "." + class_quizControls, _ctrlPreviousButton = "." + class_ctrlPreviousButton, _ctrlNextButton = "." + class_ctrlNextButton, _ctrlCompleteBes ". . "+ class_viewResultsButton, _showingResults =". "+ _ showingResults, _quizQuestions = _element + _question, _quiz_answer = _element + _answers + 'li', _ quizCtrls = _element + _controls,_quizCtrlPreviousButton = _element + _ctrlPreviousButton, _quizCtrlNextButton = _element + _ctrlNextButton, _quizCompleteButton = _element + _ctrlCompleteButton, _quizViewResultsButton = _element + _ctrlNextButton, _quizCompleteButton = _element + _ctrlCompleteButton, _quizViewResultsButton = _element + _ctrlNextButton, _quizCompleteButton = _element + _ctrlCompleteButton, _quizViewResultsButton = _element + plugin_elig.elex; function (data) {var _quizHTML; quizData = data; questions = plugin.config.randomizeQuestions? plugin.method.randomizeArray (quizData.questions): quizData.questions; questionCount = questions.length; if (! $ element.hasClass (" quiz ")) {$ element.addClass (" quiz ");}function (data) {var _quizHTML; quizData = data; questions = plugin.config.randomizeQuestions? plugin.method.randomizeArray (quizData.questions): quizData.questions; questionCount = questions.length; if (! $ element.hasClass (" quiz ")) {$ element.addClass (" quiz ");}function (data) {var _quizHTML; quizData = data; questions = plugin.config.randomizeQuestions? plugin.method.randomizeArray (quizData.questions): quizData.questions; questionCount = questions.length; if (! $ element.hasClass (" quiz ")) {$ element.addClass (" quiz ");}
_quizHTML = '<ul class = "' + class_quizQuestions + '">'; $. each (questions, function (q) {var question = questions [q]; question.options = plugin.config.randomizeAnswers? plugin.method.randomizeArray (question.options): question.options; _quizHTML + = '<li'; _ quizHTML + = (q === 0? 'class = "' + class_showQuestion + '">': '>'); if (plugin.config.show_QuestionCount ) {_ quizHTML + = '<span class = "' + class_questionCount + '">'; _ quizHTML + = plugin.config.questionCount_text.replace ('% current_index', q + 1) .replace ('% totalQuestions', questionCount)); _ quizHTML + = '</span>';}
_quizHTML + = '<h2 class = "' + class_questionTitle + '">'; _ quizHTML + = question.q; _quizHTML + = '</h2>'; _quizHTML + = '<ul class = "' + class_questionAnswers + '">'; $. each. (question.options, function (a) {var _input_name = _element_id + '- q' + (q + 1), _ input_id = _input_name + '- a' + (a + 1); _ quizHTML + = '<li>'; _quizHTML + = ' <label for = "'+ _ input_id +'"> '; _ quizHTML + =' <input '; _quizHTML + = (plugin.config.showRadioButtons?' ':' class = "hidden" '); _ quizHTML + =' type = "radio" name = "'; _ quizHTML + = _ input_name +'" '; _ quizHTML + =' id = "'+ _ input_id +'" '; _ quizHTML + =' value = "'+ question.options [a] +'"> '; _ quizHTML + = question.options [] a]; _ quizHTML + = '</ label> '; _ quizHTML + =' </li> ';}); _ quizHTML + =' </ul> '; _quizHTML + =' </li> '; q + = 1;}); _ quizHTML + =' </ul> ' ; _quizHTML + = '<div class = "' + class_quizControls + '">'; if (plugin.config.showBackButton) {_ quizHTML + = '<button class = "' + class_ctrlPreviousButton + '">'; _ quizHTML + = plugin.configbackButton + ' </button> ';};};}
_quizHTML + = '<button class = "' + class_ctrlNextButton + '' + class_disabled + '">'; _ quizHTML + = plugin.config.nextButton_text + '</button>'; _quizHTML + = '<button class = "' + class_ctrlomplete '+ "> '; _ quizHTML + = plugin.config.completeButton_text +' </button> '; _quizHTML + =' </div> '; $ element.append (_quizHTML); plugin.events.init ();}, randomizeArray: function (array (array) ) {var m = array.length, t, i; while (m) {i = Math.floor (Math.random () * m -); t = array [m]; array [m] = array [i ]; array [i] = t;}
return array;}, buildQuizResults: function () {var resultsHTML = '', correctAnswerCount = 0, totalScore; function _checkAnswers () {$. each (questions, function (index) {questions [index] .answerCorrect = questions [index] .selected === questions [index] .a? true: false; if (questions [index] .answerCorrect) {correctAnswerCount + = 1;} else {correctAnswerCount = correctAnswerCount;}}); totalScore = (correctAnswerCount / questionCount) * 100 ;}
_checkAnswers (); resultsHTML + = '<div class = "' + class_quizResults + '">'; resultsHTML + = '<h1 class = "' + class_quizScoreRank + '">'; if (totalScore == 100) {resultsHTML + = totalScore + "-" + plugin.config.quizScoreRank_text.a;} else if (totalScore> 80) {resultsHTML + = totalScore + "-" + plugin.config.quizScoreRank_text.g;} else if (totalScore> 60) {resultsHTML + = totalScore + "-" + plugin .config.quizScoreRank_text.b;} else if (totalScore> 40) {resultsHTML + = totalScore + "-" + plugin.config.quizScoreRank_text.c;} else if (totalScore> 20) {resultsHTML + = totalScore + "-" + plugin.config .quizScoreRank_text.d;} else {resultsHTML + = totalScore + "-" + plugin.config.quizScoreRank_text.f;}
resultsHTML + = '</h1>'; resultsHTML + = '<p class = "' + class_quizScore + '">'; resultsHTML + = plugin.config.quizScore_text.replace ('% totalScore', correctAnswerCount). place ('% totalQuestions', questionCount); resultsHTML + = '</p>'; if (plugin.config.showScoreMessage) {resultsHTML + = '<p class = "' + class_quizScoreMessage + '">'; resultsHTML + = plugin.config.quizScoreMessage_text; resultsHTML + = '</ p> ';}
if (plugin.config.showViewResultsButton) {resultsHTML + = '<button class = "' + class_viewResultsButton + '">'; resultsHTML + = plugin.config.viewResultsButton_text; resultsHTML + = '</button>';}
$ element.append (resultsHTML); if (plugin.config.showViewResultsButton) {plugin.events.resultsButton ();}}}; plugin.events = {init: function () {this.controls.init (); this. answerQuestion (); this.checkQuestion ();}, controls: {DOM: function () {this.plugin = plugin.events; this.questionCount = questionCount-1; this. $ previous = $ (_ quizCtrlPreviousButton); this. $ next = $ (_ quizCtrlNextButton); this. $ complete = $ (_ quizCompleteButton); this. $ buttons = this. $ previous.add (this. $ next) .add (this. $ complete);}, init: function () {this.DOM (); var $ buttons = this. $ buttons, _this = this; $ buttons.on ('click', function () {var $ button = $ (this); if (_this.isNotDisabled ($ button )) {switch ($ button.attr ('class')) {case class_ctrlPreviousButton: _this.plugin.previousQuestion (); break; case class_ctrlNextButton: _this.plugin.nextQuestion (); break; case class_ctrlCompleteButton + ('; + _questions).add (_quizCtrls) .remove (); plugin.method.buildQuizResults (); break;}}});}, isNotDisabled: function (button) {return! button.hasClass (class_disabled)? true: false;}, resetDisabled: function () {var totalAnswered = 0; switch (question_index) {case 0: this. $ previous.addClass (class_disabled); this. $ complete.hide (); this. $ next.show (); break; case this. questionCount: this. $ next.addClass (class_disabled) .hide (); this. $ previous.removeClass (class_disabled); this. $ complete.show (); break; default: this. $ previous.removeClass (class_disabled); this . $ next.show (); this. $ complete.hide (); break;}break; case this.questionCount: this. $ next.addClass (class_disabled) .hide (); this. $ previous.removeClass (class_disabled); this. $ complete.show (); break; default: this. $ previous.removeClass (class_disabled); this. $ next.show (); this. $ complete.hide (); break;}break; case this.questionCount: this. $ next.addClass (class_disabled) .hide (); this. $ previous.removeClass (class_disabled); this. $ complete.show (); break; default: this. $ previous.removeClass (class_disabled); this. $ next.show (); this. $ complete.hide (); break;}
this. $ next = questions [question_index]. selected! == undefined? this. $ next.removeClass (class_disabled): this. $ next.addClass (class_disabled); $. each (questions, function (i) {totalAnswered = questions [i]. selected? totalAnswered + = 1: totalAnswered = totalAnswered;}); if (totalAnswered === questionCount) {this. $ complete.removeClass (class_disabled);}}}, nextQuestion: function () {question_index + = 1; this.checkQuestion ();}, previousQuestion: function () {question_index- = 1; this.checkQuestion ();}, checkQuestion: function () {this.controls.resetDisabled (); $ (_ quizQuestions) .removeClass (class_showQuestion) ; $ ($ (_ quizQuestions) [question_index]). addClass (class_showQuestion);}, answerQuestion: function () {function resetAnswerGroup (input) {var _grpName = $ ('input: radio [name = "' + input.prop (input) "name") + '"]'), _ inputParent = _grpName.parent (). parent (); _ inputParent.removeClass (class_selectedAnswer);}
$ (_ quiz_answer + 'input'). on ('click', function (e) {var _ $ answer = $ (this), _ answerParent = _ $ answer.parent (). parent (); resetAnswerGroup (_ $ answer); _answerParent.addClass (class_selectedAnswer); questions [question_index] .selected = _ $ answer.val (); plugin.events.checkQuestion ();});}, resultsButton: function () {$ (_ quizViewResultsButton) .on ('click. ', function () {var resultsHTML; $ (_ quizViewResultsButton) .remove (); resultsHTML =' <h2> '+ plugin.config.resultsHeader_text +' </h2> '; resultsHTML + =' <ul class = "'+ class_showingResults +' "> '; $. each (questions, function (index) {resultsHTML + =' <li class =" '; resultsHTML + = questions [index] .answerCorrect?' answeredCorrect ':' answeredWrong '; resultsHTML + =' "> '; resultsHTML + = '<h3 class = "questionTitle">';resultsHTML + = (index + 1) + "." + questions [index] .q; resultsHTML + = '</h3>'; resultsHTML + = '<p>'; if (! questions [index] .answerCorrect) {resultsHTML + = ' <strong> Your answer: </strong> '; resultsHTML + = questions [index] .selected +' <br> ';}
resultsHTML + = '<strong> Correct answers: </strong>'; resultsHTML + = questions [index] .a + '<br>'; resultsHTML + = '</p>'; resultsHTML + = '</li>';}) ; resultsHTML + = '</ul>'; $ (_ quizResults) .append (resultsHTML);});}}; if (quizData) {if (typeof quizData === "string") {$. getJSON (quizData). then (function (data) {plugin.method.buildQuiz (data);});} else if (typeof options.quizData === "object") {plugin.method.buildQuiz (quizData);} else {quizData = null ; throw "Error: Check quizData for -" + _element;}}}; $. fn.dlxQuiz = function (options) {return this.each (function () {var plugin = new $ .dlxQuiz (this, options); });};} (jQuery));
